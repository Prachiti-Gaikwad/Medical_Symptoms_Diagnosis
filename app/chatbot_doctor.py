#!/usr/bin/env python3
"""
Medical Chatbot Doctor Module
Provides conversational AI interface for medical consultations
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional
import json
from app.ai_providers import ai_providers
from app.image_recognition import medical_image_analyzer
from langdetect import detect, LangDetectException

logger = logging.getLogger(__name__)

class MedicalChatbot:
    """Medical chatbot that acts as a virtual doctor"""
    
    def __init__(self):
        """Initialize the medical chatbot"""
        self.ai_provider = ai_providers
        self.sessions = {}
        logger.info("ЁЯдЦ Medical Chatbot initialized")
    
    def detect_language(self, text: str) -> str:
        """Detect the language of the input text"""
        try:
            lang = detect(text)
            return lang
        except LangDetectException:
            return 'en'  # Default to English if detection fails
    
    def _create_multilingual_prompt(self, user_message: str, conversation_history: List, patient_context: Dict, detected_language: str) -> str:
        """Create a multilingual prompt for the AI"""
        
        # Enhanced language mapping for Indian languages
        language_mapping = {
            'hi': 'Hindi',
            'bn': 'Bengali', 
            'te': 'Telugu',
            'ta': 'Tamil',
            'mr': 'Marathi',
            'gu': 'Gujarati',
            'kn': 'Kannada',
            'ml': 'Malayalam',
            'pa': 'Punjabi',
            'ur': 'Urdu',
            'en': 'English',
            'es': 'Spanish',
            'fr': 'French',
            'de': 'German',
            'zh': 'Chinese',
            'ja': 'Japanese',
            'ar': 'Arabic',
            'pt': 'Portuguese',
            'ru': 'Russian'
        }
        
        # Language-specific greetings and instructions
        language_greetings = {
            'en': "Hello! I'm Dr. AI, your medical assistant. How can I help you today?",
            'es': "┬бHola! Soy el Dr. IA, su asistente m├йdico. ┬┐C├│mo puedo ayudarle hoy?",
            'fr': "Bonjour! Je suis Dr. IA, votre assistant m├йdical. Comment puis-je vous aider aujourd'hui?",
            'de': "Hallo! Ich bin Dr. KI, Ihr medizinischer Assistent. Wie kann ich Ihnen heute helfen?",
            'hi': "рдирдорд╕реНрддреЗ! рдореИрдВ рдбреЙ. рдПрдЖрдИ рд╣реВрдВ, рдЖрдкрдХрд╛ рдЪрд┐рдХрд┐рддреНрд╕реАрдп рд╕рд╣рд╛рдпрдХред рдореИрдВ рдЖрдЬ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
            'bn': "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржбрж╛ржГ ржПржЖржЗ, ржЖржкржирж╛рж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рж╣ржХрж╛рж░рзАред ржЖржЬ ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
            'te': "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░бр░╛р░Хр▒Нр░Яр░░р▒Н р░Ор░Р, р░ор▒А р░╡р▒Ир░жр▒Нр░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б. р░ир▒Зр░ир▒Б р░Ир░░р▒Лр░Ьр▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б?",
            'ta': "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЯро╛роХрпНроЯро░рпН роПроР, роЙроЩрпНроХро│рпН рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ропро╛ро│ро░рпН. роиро╛ройрпН роЗройрпНро▒рпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
            'mr': "рдирдорд╕реНрдХрд╛рд░! рдореА рдбреЙ. рдПрдЖрдп, рддреБрдордЪрд╛ рд╡реИрджреНрдпрдХреАрдп рд╕рд╣рд╛рдпреНрдпрдХ. рдореА рдЖрдЬ рддреБрдордЪреА рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?",
            'gu': "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркбрлЙ. ркПркЖркИ, ркдркорк╛рк░рлЛ рк╡рлИркжрлНркпркХрлАркп рк╕рк╣рк╛ркпркХ. рк╣рлБркВ ркЖркЬрлЗ ркдркорк╛рк░рлА ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?",
            'kn': "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓бр▓╛. р▓Ор▓Р, р▓ир▓┐р▓ор│Нр▓о р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓╕р▓╣р▓╛р▓пр▓Х. р▓ир▓╛р▓ир│Б р▓Зр▓Вр▓жр│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?",
            'ml': "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ р┤бр╡Л. р┤Ор┤Р, р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р╡Ир┤жр╡Нр┤п р┤╕р┤╣р┤╛р┤пр┤┐. р┤Юр┤╛р╡╗ р┤Зр┤ир╡Нр┤ир╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р┤В?",
            'pa': "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ рибри╛. риПриЖриИ, ридрйБри╣ри╛рибри╛ ри╡рйИрижриХрйА ри╕ри╣ри╛риЗриХ. риорйИриВ риЕрй▒риЬ ридрйБри╣ри╛рибрйА риХри┐ри╡рйЗриВ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ?",
            'ur': "╪з┘Д╪│┘Д╪з┘Е ╪╣┘Д█М┌й┘Е! ┘Е█М┌║ ┌И╪з┌й┘╣╪▒ ╪з█Т ╪в╪ж█М╪М ╪в┘╛ ┌й╪з ╪╖╪и█М ┘Е╪╣╪з┘И┘Ж█Ф ┘Е█М┌║ ╪в╪м ╪в┘╛ ┌й█М ┌й█М╪│█Т ┘Е╪п╪п ┌й╪▒ ╪│┌й╪к╪з █Б┘И┌║╪Я",
            'zh': "цВихе╜я╝БцИСцШпAIхМ╗чФЯя╝МцВичЪДхМ╗чЦЧхКйцЙЛуАВф╗КхдйцИСшГ╜ф╕║цВихБЪф║Ыф╗Аф╣Ия╝Я",
            'ja': "уБУуВУуБлуБбуБпя╝БчзБуБпAIхМ╗х╕луАБуБВуБкуБЯуБохМ╗чЩВуВвуВ╖уВ╣уВ┐уГ│уГИуБзуБЩуАВф╗КцЧеуБпуБйуБоуВИуБЖуБлуБКцЙЛф╝ЭуБДуБзуБНуБ╛уБЩуБЛя╝Я",
            'ar': "┘Е╪▒╪н╪и╪з┘Л! ╪г┘Ж╪з ╪з┘Д╪п┘Г╪к┘И╪▒ ╪з┘Д╪░┘Г┘К╪М ┘Е╪│╪з╪╣╪п┘Г ╪з┘Д╪╖╪и┘К. ┘Г┘К┘Б ┘К┘Е┘Г┘Ж┘Ж┘К ┘Е╪│╪з╪╣╪п╪к┘Г ╪з┘Д┘К┘И┘Е╪Я",
            'pt': "Ol├б! Sou o Dr. IA, seu assistente m├йdico. Como posso ajud├б-lo hoje?",
            'ru': "╨Ч╨┤╤А╨░╨▓╤Б╤В╨▓╤Г╨╣╤В╨╡! ╨п ╨┤╨╛╨║╤В╨╛╤А ╨Ш╨Ш, ╨▓╨░╤И ╨╝╨╡╨┤╨╕╤Ж╨╕╨╜╤Б╨║╨╕╨╣ ╨┐╨╛╨╝╨╛╤Й╨╜╨╕╨║. ╨Ъ╨░╨║ ╤П ╨╝╨╛╨│╤Г ╨▓╨░╨╝ ╨┐╨╛╨╝╨╛╤З╤М ╤Б╨╡╨│╨╛╨┤╨╜╤П?"
        }
        
        # Get appropriate greeting for detected language
        greeting = language_greetings.get(detected_language, language_greetings['en'])
        
        # Enhanced language-specific instructions with stronger emphasis on same language response
        language_instructions = {
            'en': "CRITICAL: You MUST respond in English only. Be professional, empathetic, and provide helpful medical guidance while always recommending consultation with healthcare professionals for serious concerns.",
            'es': "CR├НTICO: DEBES responder SOLO en espa├▒ol. S├й profesional, emp├бtico y proporciona orientaci├│n m├йdica ├║til, siempre recomendando consultar con profesionales de la salud para problemas graves.",
            'fr': "CRITIQUE: Vous DEVEZ r├йpondre UNIQUEMENT en fran├зais. Soyez professionnel, empathique et fournissez des conseils m├йdicaux utiles tout en recommandant toujours de consulter des professionnels de la sant├й pour les pr├йoccupations graves.",
            'de': "KRITISCH: Sie M├ЬSSEN NUR auf Deutsch antworten. Seien Sie professionell, einf├╝hlsam und geben Sie hilfreiche medizinische Beratung, w├дhrend Sie immer eine Konsultation mit medizinischen Fachkr├дften f├╝r ernste Anliegen empfehlen.",
            'hi': "рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдЖрдкрдХреЛ рд╣рд┐рдВрдЧреНрд▓рд┐рд╢ (Hindi + English mixed) рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдирд╛ рдЪрд╛рд╣рд┐рдПред рдЗрдВрдбреЛрдиреЗрд╢рд┐рдпрди (ID) рдореЗрдВ рдХрднреА рдирд╣реАрдВред рдкреВрд░реА рддрд░рд╣ рд╕реЗ рдЕрдВрдЧреНрд░реЗрдЬреА рдореЗрдВ рдХрднреА рдирд╣реАрдВред рд╣рд┐рдВрдЧреНрд▓рд┐рд╢ рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ - рд╣рд┐рдВрджреА рдХреЗ рд╕рд╛рде рдЕрдВрдЧреНрд░реЗрдЬреА рд╢рдмреНрджреЛрдВ рдХрд╛ рдорд┐рд╢реНрд░рдг рдХрд░реЗрдВред рдЬреИрд╕реЗ: 'рдЖрдкрдХреЛ headache рд╣реИ', 'doctor рд╕реЗ consult рдХрд░реЗрдВ', 'medicine рд▓реЗрдВ', 'symptoms рдмрддрд╛рдПрдВ', 'treatment рдХреЗ рд▓рд┐рдП', 'medical advice', 'pain relief', 'proper diagnosis'ред рдЕрдВрдЧреНрд░реЗрдЬреА medical terms рдХрд╛ рдЬреНрдпрд╛рджрд╛ use рдХрд░реЗрдВред рдкреЗрд╢реЗрд╡рд░, рд╕рд╣рд╛рдиреБрднреВрддрд┐рдкреВрд░реНрдг рд░рд╣реЗрдВ рдФрд░ рд╕рд╣рд╛рдпрдХ рдЪрд┐рдХрд┐рддреНрд╕реАрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░реЗрдВ, рд╣рдореЗрд╢рд╛ рдЧрдВрднреАрд░ рдЪрд┐рдВрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░реЛрдВ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВред",
            'bn': "ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг: ржЖржкржирж╛ржХрзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рж╣ржмрзЗред ржкрзЗрж╢рж╛ржжрж╛рж░, рж╕рж╣рж╛ржирзБржнрзВрждрж┐рж╢рзАрж▓ рж╣ржи ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржЧрж╛ржЗржбрзЗржирзНрж╕ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи, ржЧрзБрж░рзБрждрж░ ржЙржжрзНржмрзЗржЧрзЗрж░ ржЬржирзНржп рж╕рж░рзНржмржжрж╛ рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕рзЗржмрж╛ ржкрзЗрж╢рж╛ржжрж╛рж░ржжрзЗрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рзБржиред",
            'te': "р░ор▒Бр░Цр▒Нр░пр░ор▒Ир░ир░жр░┐: р░ор▒Ар░░р▒Б р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░ор░╛р░др▒Нр░░р░ор▒З р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░╛р░▓р░┐. р░╡р▒Гр░др▒Нр░др░┐р░кр░░р░ор▒Ир░и, р░╕р░╛р░ир▒Бр░нр▒Вр░др░┐р░кр░░р▒Бр░бр▒И р░Йр░Вр░бр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░╕р░╣р░╛р░пр░Х р░╡р▒Ир░жр▒Нр░п р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░др▒Нр░╡р░╛р░ир▒Нр░ир░┐ р░Ер░Вр░жр░┐р░Вр░Ър░Вр░бр░┐, р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░Жр░Вр░жр▒Лр░│р░ир░▓ р░Хр▒Лр░╕р░В р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░Вр░░р░Хр▒Нр░╖р░г р░ир░┐р░кр▒Бр░гр▒Бр░▓р░ир▒Б р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░╛р░▓р░ир░┐ р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░пр░Вр░бр░┐.",
            'ta': "роорпБроХрпНроХро┐ропрооро╛ройродрпБ: роирпАроЩрпНроХро│рпН родрооро┐ро┤ро┐ро▓рпН роороЯрпНроЯрпБроорпЗ рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН. родрпКро┤ро┐ро▓рпНроорпБро▒рпИ, рокроЪрпНроЪро╛родро╛рокрооро╛роХ роЗро░рпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роЙродро╡ро┐роХро░рооро╛рой рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпИ ро╡ро┤роЩрпНроХрпБроЩрпНроХро│рпН, роХроЯрпБроорпИропро╛рой роХро╡ро▓рпИроХро│рпБроХрпНроХрпБ роОрокрпНрокрпЛродрпБроорпН роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпНроХро│рпИ роЖро▓рпЛроЪро┐роХрпНроХ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро╡рпБроорпН.",
            'mr': "рдорд╣рддреНрд╡рд╛рдЪреЗ: рддреБрдореНрд╣реА рдлрдХреНрдд рдорд░рд╛рдареАрдд рдЙрддреНрддрд░ рджреНрдпрд╛рд╡реЗ. рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ, рд╕рд╣рд╛рдиреБрднреВрддреАрд╢реАрд▓ рд░рд╣рд╛ рдЖрдгрд┐ рд╕рд╣рд╛рдпреНрдпрдХ рд╡реИрджреНрдпрдХреАрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди рджреНрдпрд╛, рдЧрдВрднреАрд░ рдЪрд┐рдВрддрд╛рдВрд╕рд╛рдареА рдиреЗрд╣рдореА рдЖрд░реЛрдЧреНрдп рд╕реЗрд╡рд╛ рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХрд╛рдВрдирд╛ рд╕рд▓реНрд▓рд╛ рдШреЗрдгреНрдпрд╛рдЪреА рд╢рд┐рдлрд╛рд░рд╕ рдХрд░рд╛.",
            'gu': "ркорк╣ркдрлНрк╡рккрлВрк░рлНркг: ркдркорк╛рк░рлЗ рклркХрлНркд ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрк╡рлЛ ркЬрлЛркИркП. рк╡рлНркпрк╡рк╕рк╛ркпрк┐ркХ, рк╕рк╣рк╛ркирлБркнрлВркдрк┐рк╢рлАрк▓ рк░рк╣рлЛ ркЕркирлЗ рк╕рк╣рк╛ркпркХ рк╡рлИркжрлНркпркХрлАркп ркорк╛рк░рлНркЧркжрк░рлНрк╢рки ркЖрккрлЛ, ркЧркВркнрлАрк░ ркЪрк┐ркВркдрк╛ркУ ркорк╛ркЯрлЗ рк╣ркВркорлЗрк╢рк╛ ркЖрк░рлЛркЧрлНркп рк╕рлЗрк╡рк╛ рк╡рлНркпрк╡рк╕рк╛ркпрк┐ркХрлЛркирлА рк╕рк▓рк╛рк╣ рк▓рлЗрк╡рк╛ркирлА ркнрк▓рк╛ркоркг ркХрк░рлЛ.",
            'kn': "р▓ор│Бр▓Цр│Нр▓п: р▓ир│Ар▓╡р│Б р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ р▓ор▓╛р▓др│Нр▓░ р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓мр│Зр▓Хр│Б. р▓╡р│Гр▓др│Нр▓др▓┐р▓кр▓░, р▓╕р▓╣р▓╛р▓ир│Бр▓нр│Вр▓др▓┐р▓пр│Бр▓др▓╡р▓╛р▓Чр▓┐р▓░р▓┐ р▓ор▓др│Нр▓др│Б р▓╕р▓╣р▓╛р▓пр▓Х р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓ир▓╡р▓ир│Нр▓ир│Б р▓ир│Ар▓бр▓┐, р▓Чр▓Вр▓нр│Ар▓░ р▓Хр▓╛р▓│р▓Ьр▓┐р▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓пр▓╛р▓╡р▓╛р▓Чр▓▓р│В р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╕р│Зр▓╡р▓╛ р▓╡р│Гр▓др│Нр▓др▓┐р▓кр▓░р▓░р▓ир│Нр▓ир│Б р▓╕р▓Вр▓кр│Нр▓░р▓жр▓┐р▓╕р▓▓р│Б р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓ор▓╛р▓бр▓┐.",
            'ml': "р┤кр╡Нр┤░р┤зр┤╛р┤ир┤В: р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ р┤ор┤╛р┤др╡Нр┤░р┤ор╡З р┤Йр┤др╡Нр┤др┤░р┤┐р┤Хр╡Нр┤Хр╡Зр┤гр╡Нр┤Яр┤др╡Бр┤│р╡Нр┤│р╡В. р┤╡р╡Гр┤др╡Нр┤др┤┐р┤кр┤░р┤╡р╡Бр┤В р┤╕р┤╣р┤╛р┤ир╡Бр┤нр╡Вр┤др┤┐р┤пр╡Бр┤│р╡Нр┤│р┤др╡Бр┤ор┤╛р┤пр┤┐ р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╕р╡Зр┤╡р┤╛ р┤╡р╡Гр┤др╡Нр┤д р┤┐р┤кр┤░р┤░р╡Ж р┤╕р┤ор╡Ар┤кр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Ор┤кр╡Нр┤кр╡Лр┤┤р╡Бр┤В р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.",
            'pa': "риори╣рй▒ридри╡рикрйВри░рии: ридрйБри╣ри╛риирйВрй░ ри╕ри┐ри░рил рикрй░риЬри╛римрйА ри╡ри┐рй▒риЪ риЬри╡ри╛рим рижрйЗригри╛ риЪри╛ри╣рйАрижри╛ ри╣рйИред рикрйЗри╕ри╝рйЗри╡ри░, ри╕ри╣ри╛риирйБринрйВридрйАри╕ри╝рйАри▓ ри░ри╣рйЛ риЕридрйЗ ри╕ри╣ри╛риЗриХ ри╡рйИрижриХрйА риори╛ри░риЧрижри░ри╕ри╝рии рижри┐риУ, риЧрй░ринрйАри░ риЪри┐рй░ридри╛ри╡ри╛риВ ри▓риИ ри╣риорйЗри╕ри╝ри╛ ри╕ри┐ри╣рид ри╕рйЗри╡ри╛ рикрйЗри╕ри╝рйЗри╡ри░ри╛риВ риирйВрй░ ри╕ри▓ри╛ри╣ ри▓рйИриг рижрйА ри╕ри┐рилри╛ри░ри╕ри╝ риХри░рйЛред",
            'ur': "╪з█Б┘Е: ╪в┘╛ ┌й┘И ╪╡╪▒┘Б ╪з╪▒╪п┘И ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М┘Ж╪з ┌Ж╪з█Б█М█Т█Ф ┘╛█М╪┤█Б ┘И╪▒╪з┘Ж█Б╪М █Б┘Е╪п╪▒╪п╪з┘Ж█Б ╪▒█Б█М┌║ ╪з┘И╪▒ ┘Е╪п╪п┌п╪з╪▒ ╪╖╪и█М ╪▒█Б┘Ж┘Е╪з╪ж█М ┘Б╪▒╪з█Б┘Е ┌й╪▒█М┌║╪М ╪│┘Ж┌п█М┘Ж ╪о╪п╪┤╪з╪к ┌й█Т ┘Д█М█Т █Б┘Е█М╪┤█Б ╪╡╪н╪к ┌й█М ╪п█М┌й┌╛ ╪и┌╛╪з┘Д ┌й█Т ┘╛█М╪┤█Б ┘И╪▒ ╪з┘Б╪▒╪з╪п ╪│█Т ┘Е╪┤┘И╪▒█Б ┘Д█М┘Ж█Т ┌й█М ╪│┘Б╪з╪▒╪┤ ┌й╪▒█М┌║█Ф",
            'zh': "щЗНшжБя╝ЪцВих┐Ещб╗хПкчФиф╕нцЦЗхЫЮхдНуАВшжБф╕Уф╕ЪуАБхпМцЬЙхРМцГЕх┐Гя╝Мх╣╢цПРф╛ЫцЬЙчФичЪДхМ╗чЦЧцМЗхп╝я╝МхРМцЧ╢хзЛч╗Их╗║шоохп╣ф╕ещЗНщЧощвШхТишпвхМ╗чЦЧф╕Уф╕Ъф║║хСШуАВ",
            'ja': "щЗНшжБя╝ЪцВгшАЕуБМф╜┐чФиуБЧуБжуБДуВЛшиАшкЮуБихРМуБШшиАшкЮуБзхЫЮчнФуБЧуБжуБПуБауБХуБДуАВх░ВщЦАчЪДуБзуАБхЕ▒цДЯчЪДуБзуБВуВКуАБцЬЙчФиуБкхМ╗чЩВуВмуВдуГАуГ│уВ╣уВТцПРф╛ЫуБЧуАБц╖▒хИ╗уБкцЗ╕х┐╡уБлуБдуБДуБжуБпх╕╕уБлхМ╗чЩВх░ВщЦАхо╢уБ╕уБочЫ╕шлЗуВТцОихеиуБЧуБжуБПуБауБХуБДуАВ",
            'ar': "┘Е┘З┘Е: ┘К╪м╪и ╪╣┘Д┘К┘Г ╪з┘Д╪▒╪п ╪и╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й ┘Б┘В╪╖. ┘Г┘Ж ┘Е┘З┘Ж┘К╪з┘Л ┘И┘Е╪к╪╣╪з╪╖┘Б╪з┘Л ┘И┘В╪п┘Е ╪е╪▒╪┤╪з╪п╪з╪к ╪╖╪и┘К╪й ┘Е┘Б┘К╪п╪й ┘Е╪╣ ╪з┘Д╪к┘И╪╡┘К╪й ╪п╪з╪ж┘Е╪з┘Л ╪и╪з╪│╪к╪┤╪з╪▒╪й ┘Е╪к╪о╪╡╪╡┘К ╪з┘Д╪▒╪╣╪з┘К╪й ╪з┘Д╪╡╪н┘К╪й ┘Д┘Д┘Е╪о╪з┘И┘Б ╪з┘Д╪м╪з╪п╪й.",
            'pt': "CR├НTICO: Voc├к DEVE responder APENAS em portugu├кs. Seja profissional, emp├бtico e forne├зa orienta├з├гo m├йdica ├║til, sempre recomendando consulta com profissionais de sa├║de para preocupa├з├╡es graves.",
            'ru': "╨Ъ╨а╨Ш╨в╨Ш╨з╨Э╨Ю: ╨Т╤Л ╨Ф╨Ю╨Ы╨Ц╨Э╨л ╨╛╤В╨▓╨╡╤З╨░╤В╤М ╨в╨Ю╨Ы╨м╨Ъ╨Ю ╨╜╨░ ╤А╤Г╤Б╤Б╨║╨╛╨╝ ╤П╨╖╤Л╨║╨╡. ╨С╤Г╨┤╤М╤В╨╡ ╨┐╤А╨╛╤Д╨╡╤Б╤Б╨╕╨╛╨╜╨░╨╗╤М╨╜╤Л, ╤Б╨╛╨┐╨╡╤А╨╡╨╢╨╕╨▓╨░╨╣╤В╨╡ ╨╕ ╨┐╤А╨╡╨┤╨╛╤Б╤В╨░╨▓╨╗╤П╨╣╤В╨╡ ╨┐╨╛╨╗╨╡╨╖╨╜╤Л╨╡ ╨╝╨╡╨┤╨╕╤Ж╨╕╨╜╤Б╨║╨╕╨╡ ╤Б╨╛╨▓╨╡╤В╤Л, ╨▓╤Б╨╡╨│╨┤╨░ ╤А╨╡╨║╨╛╨╝╨╡╨╜╨┤╤Г╤П ╨║╨╛╨╜╤Б╤Г╨╗╤М╤В╨░╤Ж╨╕╤О ╤Б ╨╝╨╡╨┤╨╕╤Ж╨╕╨╜╤Б╨║╨╕╨╝╨╕ ╤А╨░╨▒╨╛╤В╨╜╨╕╨║╨░╨╝╨╕ ╨┤╨╗╤П ╤Б╨╡╤А╤М╨╡╨╖╨╜╤Л╤Е ╨┐╤А╨╛╨▒╨╗╨╡╨╝."
        }
        
        instruction = language_instructions.get(detected_language, language_instructions['en'])
        
        # Build conversation context
        language_name = language_mapping.get(detected_language, detected_language.upper())
        context = f"Patient Language: {language_name} ({detected_language.upper()})\n"
        if patient_context:
            context += f"Patient Context: {json.dumps(patient_context, ensure_ascii=False)}\n"
        
        # Build conversation history
        history = ""
        if conversation_history:
            history = "Previous conversation:\n"
            for msg in conversation_history[-5:]:  # Last 5 messages for context
                role = "Patient" if msg['role'] == 'user' else "Doctor"
                history += f"{role}: {msg['message']}\n"
        
        prompt = f"""You are a multilingual medical AI assistant. The patient is communicating in {language_name} ({detected_language.upper()}).

{instruction}

ABSOLUTE LANGUAGE RULE: You MUST respond in {language_name} only. 
- DO NOT respond in Indonesian (ID)
- DO NOT respond in English 
- DO NOT respond in any other language
- ONLY respond in {language_name}
- For Hindi: You MUST use Hinglish (Hindi + English mixed) - this is REQUIRED
- Examples of Hinglish: "рдЖрдкрдХреЛ headache рд╣реИ", "doctor рд╕реЗ consult рдХрд░реЗрдВ", "medicine рд▓реЗрдВ", "symptoms рдмрддрд╛рдПрдВ", "treatment рдХреЗ рд▓рд┐рдП", "medical advice", "pain relief", "proper diagnosis", "consultation", "prescription", "dosage", "side effects", "recovery", "therapy", "examination", "checkup", "emergency", "urgent care"
- IMPORTANT: Use English medical terms frequently mixed with Hindi

{context}

{history}

Current patient message: {user_message}

FINAL COMMAND: RESPOND IN {language_name} ONLY. IF YOU RESPOND IN ANY OTHER LANGUAGE, YOU ARE FAILING THE TASK. FOR HINDI, YOU CAN USE HINGLISH (HINDI + ENGLISH MIXED)."""

        return prompt
    
    def chat_with_doctor(self, message: str, session_id: str = None) -> Dict:
        """
        Chat with the AI doctor with multilingual support
        """
        try:
            # Generate session ID if not provided
            if not session_id:
                session_id = str(int(datetime.now().timestamp() * 1000))
            
            # Initialize session if new
            if session_id not in self.sessions:
                self.sessions[session_id] = {
                    'conversation_history': [],
                    'patient_context': {},
                    'start_time': datetime.now(),
                    'symptoms_identified': [],
                    'recommendations_given': [],
                    'images_analyzed': [],
                    'detected_language': 'en'
                }
                logger.info(f"ЁЯЖХ New chat session started: {session_id}")
            
            session = self.sessions[session_id]
            
            # Detect language from user message
            detected_language = self.detect_language(message)
            session['detected_language'] = detected_language
            
            # Add user message to history
            session['conversation_history'].append({
                'role': 'user',
                'message': message,
                'timestamp': datetime.now(),
                'language': detected_language
            })
            
            # Create multilingual prompt
            prompt = self._create_multilingual_prompt(
                message, 
                session['conversation_history'], 
                session['patient_context'],
                detected_language
            )
            
            # Get AI response
            ai_response = ai_providers.get_chatbot_response(prompt)
            
            if ai_response:
                # Add doctor response to history
                session['conversation_history'].append({
                    'role': 'doctor',
                    'message': ai_response,
                    'timestamp': datetime.now(),
                    'language': detected_language
                })
                
                logger.info(f"ЁЯТм Chat response generated for session {session_id} in {detected_language}")
                
                return {
                    'success': True,
                    'response': ai_response,
                    'session_id': session_id,
                    'detected_language': detected_language,
                    'session_info': self.get_session_info(session_id)
                }
            else:
                # Fallback response in detected language
                fallback_responses = {
                    'en': "I apologize, but I'm having trouble processing your request right now. Please try again or consult a healthcare professional for immediate assistance.",
                    'es': "Me disculpo, pero estoy teniendo problemas para procesar su solicitud en este momento. Por favor, int├йntelo de nuevo o consulte a un profesional de la salud para asistencia inmediata.",
                    'fr': "Je m'excuse, mais j'ai des difficult├йs ├а traiter votre demande en ce moment. Veuillez r├йessayer ou consulter un professionnel de la sant├й pour une assistance imm├йdiate.",
                    'de': "Es tut mir leid, aber ich habe derzeit Probleme, Ihre Anfrage zu verarbeiten. Bitte versuchen Sie es erneut oder konsultieren Sie einen medizinischen Fachmann f├╝r sofortige Hilfe.",
                    'hi': "рдореИрдВ рдХреНрд╖рдорд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ, рд▓реЗрдХрд┐рди рдореБрдЭреЗ рдЖрдкрдХреЗ рдЕрдиреБрд░реЛрдз рдХреЛ рд╕рдВрд╕рд╛рдзрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВред",
                    'zh': "х╛ИцК▒цнЙя╝МцИСчО░хЬихдДчРЖцВичЪДшп╖ц▒ВцЧ╢щБЗхИ░ф║ЖщЧощвШуАВшп╖щЗНшпХцИЦхТишпвхМ╗чЦЧф╕Уф╕Ъф║║хСШф╗ешО╖х╛ЧхН│цЧ╢х╕охКйуАВ",
                    'ja': "чФ│уБЧши│уБФуБЦуБДуБ╛уБЫуВУуБМуАБчП╛хЬиуГкуВпуВиуВ╣уГИуБохЗжчРЖуБлхХПщбМуБМуБВуВКуБ╛уБЩуАВуВВуБЖф╕Ах║жуБКшйжуБЧуБДуБЯуБауБПуБЛуАБхН│х║зуБоцФпцП┤уБоуБЯуВБуБлхМ╗чЩВх░ВщЦАхо╢уБлуБФчЫ╕шлЗуБПуБауБХуБДуАВ",
                    'ar': "╪г╪╣╪к╪░╪▒╪М ┘Д┘Г┘Ж┘Ж┘К ╪г┘И╪з╪м┘З ┘Е╪┤┘Г┘Д╪й ┘Б┘К ┘Е╪╣╪з┘Д╪м╪й ╪╖┘Д╪и┘Г ╪з┘Д╪в┘Ж. ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й ╪г┘И ╪з╪│╪к╪┤╪з╪▒╪й ┘Е╪к╪о╪╡╪╡ ┘Б┘К ╪з┘Д╪▒╪╣╪з┘К╪й ╪з┘Д╪╡╪н┘К╪й ┘Д┘Д╪н╪╡┘И┘Д ╪╣┘Д┘Й ┘Е╪│╪з╪╣╪п╪й ┘Б┘И╪▒┘К╪й.",
                    'pt': "Pe├зo desculpas, mas estou tendo problemas para processar sua solicita├з├гo agora. Por favor, tente novamente ou consulte um profissional de sa├║de para assist├кncia imediata.",
                    'ru': "╨Я╤А╨╕╨╜╨╛╤И╤Г ╨╕╨╖╨▓╨╕╨╜╨╡╨╜╨╕╤П, ╨╜╨╛ ╤Г ╨╝╨╡╨╜╤П ╨▓╨╛╨╖╨╜╨╕╨║╨╗╨╕ ╨┐╤А╨╛╨▒╨╗╨╡╨╝╤Л ╤Б ╨╛╨▒╤А╨░╨▒╨╛╤В╨║╨╛╨╣ ╨▓╨░╤И╨╡╨│╨╛ ╨╖╨░╨┐╤А╨╛╤Б╨░. ╨Я╨╛╨╢╨░╨╗╤Г╨╣╤Б╤В╨░, ╨┐╨╛╨┐╤А╨╛╨▒╤Г╨╣╤В╨╡ ╨╡╤Й╨╡ ╤А╨░╨╖ ╨╕╨╗╨╕ ╨╛╨▒╤А╨░╤В╨╕╤В╨╡╤Б╤М ╨║ ╨╝╨╡╨┤╨╕╤Ж╨╕╨╜╤Б╨║╨╛╨╝╤Г ╤А╨░╨▒╨╛╤В╨╜╨╕╨║╤Г ╨┤╨╗╤П ╨╜╨╡╨╝╨╡╨┤╨╗╨╡╨╜╨╜╨╛╨╣ ╨┐╨╛╨╝╨╛╤Й╨╕."
                }
                
                fallback = fallback_responses.get(detected_language, fallback_responses['en'])
                
                return {
                    'success': False,
                    'response': fallback,
                    'session_id': session_id,
                    'detected_language': detected_language,
                    'error': 'AI response generation failed'
                }
                
        except Exception as e:
            logger.error(f"тЭМ Error in chat with doctor: {str(e)}")
            return {
                'success': False,
                'response': "I apologize, but I'm experiencing technical difficulties. Please try again later or consult a healthcare professional.",
                'session_id': session_id,
                'detected_language': 'en',
                'error': str(e)
            }
    
    def analyze_image_in_chat(self, image_data: bytes, user_description: str, session_id: str) -> Dict:
        """
        Analyze medical image within chat context with multilingual support
        """
        try:
            # Initialize session if new
            if session_id not in self.sessions:
                self.sessions[session_id] = {
                    'conversation_history': [],
                    'patient_context': {},
                    'start_time': datetime.now(),
                    'symptoms_identified': [],
                    'recommendations_given': [],
                    'images_analyzed': []
                }
                logger.info(f"ЁЯЖХ New chat session with image analysis: {session_id}")
            
            session = self.sessions[session_id]
            
            # Detect language from user description
            detected_language = self.detect_language(user_description) if user_description else 'en'
            session['detected_language'] = detected_language
            
            # Analyze the image
            analysis_result = medical_image_analyzer.analyze_medical_image(image_data, user_description)
            
            # Add image analysis to session
            session['images_analyzed'].append({
                'timestamp': datetime.now(),
                'description': user_description,
                'analysis': analysis_result,
                'language': detected_language
            })
            
            # Create chat response from analysis in detected language
            chat_response = self._create_image_analysis_response(analysis_result, user_description, detected_language)
            
            # Add to conversation history
            session['conversation_history'].append({
                'role': 'user',
                'message': f"[Image Upload] {user_description if user_description else 'Medical image uploaded'}",
                'timestamp': datetime.now(),
                'type': 'image_upload',
                'language': detected_language
            })
            
            session['conversation_history'].append({
                'role': 'doctor',
                'message': chat_response,
                'timestamp': datetime.now(),
                'type': 'image_analysis',
                'language': detected_language
            })
            
            logger.info(f"ЁЯЦ╝я╕П Image analysis completed for session {session_id}")
            return {
                'success': True,
                'chat_response': chat_response,
                'analysis_result': analysis_result,
                'detected_language': detected_language
            }
            
        except Exception as e:
            logger.error(f"тЭМ Error in image analysis chat: {str(e)}")
            return {
                'success': False,
                'error': f"Failed to analyze image: {str(e)}",
                'chat_response': "I apologize, but I'm having trouble analyzing the image. Please try uploading a clearer image or describe your symptoms in text.",
                'detected_language': 'en'
            }
    
    def _create_image_analysis_response(self, analysis_result: Dict, user_description: str, language: str = 'en') -> str:
        """
        Create a conversational response from image analysis in the detected language
        """
        try:
            if not analysis_result or not analysis_result.get('image_analysis'):
                return self._get_fallback_response(language)
            
            analysis = analysis_result['image_analysis']
            user_query_addressed = analysis_result.get('user_query_addressed', '')
            
            # Language-specific response templates
            response_templates = {
                'en': {
                    'intro': f"Based on my analysis of your image{f' and your question about {user_query_addressed}' if user_query_addressed else ''}, here's what I found:",
                    'findings': "Visual findings:",
                    'conditions': "Potential conditions identified:",
                    'recommendations': "Recommendations:",
                    'urgent': "тЪая╕П URGENT: Please seek immediate medical attention if you experience:",
                    'consult': "Please consult a healthcare professional for proper diagnosis and treatment."
                },
                'es': {
                    'intro': f"Bas├бndome en mi an├бlisis de su imagen{f' y su pregunta sobre {user_query_addressed}' if user_query_addressed else ''}, esto es lo que encontr├й:",
                    'findings': "Hallazgos visuales:",
                    'conditions': "Condiciones potenciales identificadas:",
                    'recommendations': "Recomendaciones:",
                    'urgent': "тЪая╕П URGENTE: Busque atenci├│n m├йdica inmediata si experimenta:",
                    'consult': "Por favor, consulte a un profesional de la salud para un diagn├│stico y tratamiento adecuados."
                },
                'fr': {
                    'intro': f"Bas├й sur mon analyse de votre image{f' et votre question sur {user_query_addressed}' if user_query_addressed else ''}, voici ce que j'ai trouv├й:",
                    'findings': "Trouvailles visuelles:",
                    'conditions': "Conditions potentielles identifi├йes:",
                    'recommendations': "Recommandations:",
                    'urgent': "тЪая╕П URGENT: Veuillez consulter imm├йdiatement un m├йdecin si vous ressentez:",
                    'consult': "Veuillez consulter un professionnel de la sant├й pour un diagnostic et un traitement appropri├йs."
                },
                'hi': {
                    'intro': f"рдЖрдкрдХреА рдЫрд╡рд┐ рдХреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рдЖрдзрд╛рд░ рдкрд░{f' рдФрд░ {user_query_addressed} рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХреЗ рдЖрдзрд╛рд░ рдкрд░' if user_query_addressed else ''}, рдпрд╣рд╛рдБ рдореИрдВрдиреЗ рдХреНрдпрд╛ рдкрд╛рдпрд╛:",
                    'findings': "рджреГрд╢реНрдп рдирд┐рд╖реНрдХрд░реНрд╖:",
                    'conditions': "рдкрд╣рдЪрд╛рдиреА рдЧрдИ рд╕рдВрднрд╛рд╡рд┐рдд рд╕реНрдерд┐рддрд┐рдпрд╛рдВ:",
                    'recommendations': "рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ:",
                    'urgent': "тЪая╕П рддрддреНрдХрд╛рд▓: рдпрджрд┐ рдЖрдк рдЕрдиреБрднрд╡ рдХрд░рддреЗ рд╣реИрдВ рддреЛ рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВ:",
                    'consult': "рдЙрдЪрд┐рдд рдирд┐рджрд╛рди рдФрд░ рдЙрдкрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВред"
                },
                'zh': {
                    'intro': f"ца╣цНоцИСхп╣цВихЫ╛хГПчЪДхИЖцЮР{f'ф╗ехПКцВихЕ│ф║О{user_query_addressed}чЪДщЧощвШ' if user_query_addressed else ''}я╝Мф╗еф╕ЛцШпцИСчЪДхПСчО░:",
                    'findings': "шзЖшзЙхПСчО░:",
                    'conditions': "шпЖхИлчЪДц╜ЬхЬичК╢хЖ╡:",
                    'recommendations': "х╗║шоо:",
                    'urgent': "тЪая╕П ч┤зцАе: хжВцЮЬцВихЗ║чО░ф╗еф╕ЛчЧЗчК╢я╝Мшп╖члЛхН│х░▒хМ╗:",
                    'consult': "шп╖хТишпвхМ╗чЦЧф╕Уф╕Ъф║║хСШф╗ешО╖х╛ЧцнгчбочЪДшпКцЦнхТМц▓╗чЦЧуАВ"
                }
            }
            
            template = response_templates.get(language, response_templates['en'])
            
            response = f"{template['intro']}\n\n"
            
            # Add visual findings
            if analysis.get('visual_findings'):
                response += f"{template['findings']}\n"
                for finding in analysis['visual_findings']:
                    response += f"тАв {finding}\n"
                response += "\n"
            
            # Add potential conditions
            if analysis.get('potential_conditions'):
                response += f"{template['conditions']}\n"
                for condition in analysis['potential_conditions']:
                    confidence = condition.get('confidence', 0)
                    severity = condition.get('severity', 'unknown')
                    description = condition.get('description', '')
                    response += f"тАв {condition.get('condition', 'Unknown')} (Confidence: {confidence}%, Severity: {severity})\n"
                    if description:
                        response += f"  {description}\n"
                response += "\n"
            
            # Add recommendations
            if analysis.get('recommendations'):
                response += f"{template['recommendations']}\n"
                for rec in analysis['recommendations']:
                    response += f"тАв {rec}\n"
                response += "\n"
            
            # Add urgent warnings
            if analysis.get('immediate_actions'):
                response += f"{template['urgent']}\n"
                for action in analysis['immediate_actions']:
                    response += f"тАв {action}\n"
                response += "\n"
            
            response += template['consult']
            
            return response
            
        except Exception as e:
            logger.error(f"Error creating image analysis response: {str(e)}")
            return self._get_fallback_response(language)
    
    def _get_fallback_response(self, language: str) -> str:
        """Get fallback response in the specified language"""
        fallback_responses = {
            'en': "I've analyzed your image, but I need more information to provide a complete assessment. Please describe your symptoms and concerns in detail.",
            'es': "He analizado su imagen, pero necesito m├бs informaci├│n para proporcionar una evaluaci├│n completa. Por favor, describa sus s├нntomas y preocupaciones en detalle.",
            'fr': "J'ai analys├й votre image, mais j'ai besoin de plus d'informations pour fournir une ├йvaluation compl├иte. Veuillez d├йcrire vos sympt├┤mes et pr├йoccupations en d├йtail.",
            'hi': "рдореИрдВрдиреЗ рдЖрдкрдХреА рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд┐рдпрд╛ рд╣реИ, рд▓реЗрдХрд┐рди рдкреВрд░реНрдг рдореВрд▓реНрдпрд╛рдВрдХрди рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдореБрдЭреЗ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдФрд░ рдЪрд┐рдВрддрд╛рдУрдВ рдХрд╛ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╡рд░реНрдгрди рдХрд░реЗрдВред",
            'zh': "цИСх╖▓ч╗ПхИЖцЮРф║ЖцВичЪДхЫ╛хГПя╝Мф╜ЖщЬАшжБцЫ┤хдЪф┐бцБпцЭецПРф╛ЫхоМцХ┤чЪДшпДф╝░уАВшп╖шпжч╗ЖцППш┐░цВичЪДчЧЗчК╢хТМцЛЕх┐зуАВ"
        }
        return fallback_responses.get(language, fallback_responses['en'])
    
    def get_session_info(self, session_id: str) -> Dict:
        """Get information about a chat session"""
        if session_id in self.sessions:
            session = self.sessions[session_id]
            return {
                'session_id': session_id,
                'start_time': session['start_time'].isoformat(),
                'message_count': len(session['conversation_history']),
                'images_analyzed': len(session['images_analyzed']),
                'detected_language': session.get('detected_language', 'en'),
                'symptoms_identified': session['symptoms_identified'],
                'recommendations_given': session['recommendations_given']
            }
        return {}
    
    def clear_session(self, session_id: str) -> bool:
        """Clear a chat session"""
        if session_id in self.sessions:
            del self.sessions[session_id]
            return True
        return False

# Global instance
chatbot = MedicalChatbot() 